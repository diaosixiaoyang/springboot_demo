<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fangxuele.ocs.mapper.mapper.TDictionaryMapper">
    <resultMap id="BaseResultMap" type="com.fangxuele.ocs.mapper.domain.TDictionary">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="class_code" jdbcType="VARCHAR" property="classCode"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="code" jdbcType="VARCHAR" property="code"/>
        <result column="value" jdbcType="INTEGER" property="value"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, class_code, name, code, value, status
  </sql>
    <sql id="Dictionary_Column_List">
        td.id, td.class_code, td.name, td.code, td.value, td.status
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_dictionary
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_dictionary
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.fangxuele.ocs.mapper.domain.TDictionary">
    insert into t_dictionary (id, class_code, name, 
      code, value, status
      )
    values (#{id,jdbcType=BIGINT}, #{classCode,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{code,jdbcType=VARCHAR}, #{value,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.fangxuele.ocs.mapper.domain.TDictionary">
        insert into t_dictionary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="classCode != null">
                class_code,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="code != null">
                code,
            </if>
            <if test="value != null">
                value,
            </if>
            <if test="status != null">
                status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="classCode != null">
                #{classCode,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="value != null">
                #{value,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.fangxuele.ocs.mapper.domain.TDictionary">
        update t_dictionary
        <set>
            <if test="classCode != null">
                class_code = #{classCode,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="value != null">
                value = #{value,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.fangxuele.ocs.mapper.domain.TDictionary">
    update t_dictionary
    set class_code = #{classCode,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR},
      value = #{value,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="findAllEnabled" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_dictionary t where t.status = 1 order BY t.class_code,t.value
    </select>
    <select id="findByClassCode" parameterType="string" resultType="map">
        SELECT `value`,`name`
        FROM t_dictionary
        WHERE class_code = #{classCode} AND status = 1
    </select>
    <select id="getDictionaryList" resultType="map">
        select
        <include refid="Dictionary_Column_List"/>,
        tdc.name as class_name
        from t_dictionary td
        LEFT JOIN t_dictionary_class tdc ON td.class_code = tdc.code
        where td.status &lt; 99
        <if test="dictionaryName != null">
            AND td.name LIKE #{dictionaryName}
        </if>
        <if test="dictionaryValue != null">
            AND td.value = #{dictionaryValue}
        </if>
        <if test="dictionaryClass != null">
            AND td.class_code = #{dictionaryClass}
        </if>
        <if test="status != null">
            and td.status = #{status,jdbcType=INTEGER}
        </if>
        ORDER BY ${orderBy}
    </select>
</mapper>